// Generated by CoffeeScript 1.10.0
(function() {
  var global;

  global = this;

  this.series = [];

  angular.module('bcpc-rating', ['as.sortable']).controller('main', function($scope) {
    var fileExport, series, team, update;
    $scope.currentRanks = [];
    series = [];
    $scope.teamNames = ["TDL", "LovelyDonuts", "ACMakeMeHappier", "null", "sto orz", "QAQ", "ResuscitatedHope", "Veleno", "deticxe", "GG", "firebug", "The South China Sea"];
    $scope.teamList = (function() {
      var j, len, ref, results;
      ref = $scope.teamNames;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        team = ref[j];
        results.push(team);
      }
      return results;
    })();
    $scope.result = (function() {
      var j, len, ref, results;
      ref = $scope.teamNames;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        team = ref[j];
        results.push({
          name: team,
          rating: 1000
        });
      }
      return results;
    })();
    $scope.dragControlListeners = {
      itemMoved: function(event) {
        return console.log(event);
      },
      orderChanged: function(event) {
        return console.log(event);
      }
    };
    $scope.calc = function() {
      var i, j, len, rank, rankDic, ref;
      rankDic = {};
      ref = $scope.teamList;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        team = ref[i];
        rankDic[team] = i + 1;
      }
      rank = (function() {
        var k, len1, ref1, results;
        ref1 = $scope.teamNames;
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          team = ref1[k];
          results.push(rankDic[team]);
        }
        return results;
      })();
      $scope.currentRanks.push(rank);
      return update();
    };
    update = function() {
      var i, res;
      if ($scope.currentRanks == null) {
        $scope.currentRanks = [];
      }
      series = (function() {
        var j, len, ref, results;
        ref = $scope.teamNames;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          team = ref[j];
          results.push({
            name: team,
            data: []
          });
        }
        return results;
      })();
      res = global.calc($scope.currentRanks, series, $scope.teamNames.length);
      $scope.result = (function() {
        var j, len, ref, results;
        ref = $scope.teamNames;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          team = ref[i];
          results.push({
            name: team,
            rating: parseInt(res[i])
          });
        }
        return results;
      })();
      $scope.result.sort(function(a, b) {
        if (a.rating < b.rating) {
          return 1;
        }
        return -1;
      });
      $scope.drawChart();
    };
    $scope.showNow = function() {
      $scope.currentRanks = [[4, 9, 2, 1, 10, 6, 3, 8, 5, 7, 11, 12], [2, 4, 3, 1, 10, 5, 6, 7, 8, 12, 11, 9]];
      return update();
    };
    $scope.drawChart = function() {
      var j, results;
      if (global.series == null) {
        global.series = [];
      }
      $("#panel").highcharts({
        title: {
          text: "Rating变化图",
          x: -20
        },
        subtitle: {
          text: "Source: 北航ACM集训队",
          x: -20
        },
        xAxis: {
          categories: (function() {
            results = [];
            for (j = 1; j <= 100; j++){ results.push(j); }
            return results;
          }).apply(this)
        },
        yAxis: {
          title: {
            text: "Rating"
          },
          plotLines: [
            {
              value: 0,
              width: 1,
              color: "#808080"
            }
          ]
        },
        tooltip: {
          valueSuffix: "",
          pointFormatter: function() {
            var delta, sign;
            if (this.x === 0) {
              return "<span style='color:" + this.color + "'>\u25CF</span> " + this.series.name + ": <b>" + this.y + "</b><br/>";
            } else {
              delta = this.y - this.series.data[this.x - 1].y;
              sign = '+';
              if (delta < 0) {
                sign = '';
              }
              return "<span style='color:" + this.color + "'>\u25CF</span> " + this.series.name + ": <b>" + this.y + "</b><br/><b>" + sign + delta + "</b>";
            }
          }
        },
        legend: {
          layout: "vertical",
          align: "right",
          verticalAlign: "middle",
          borderWidth: 0
        },
        series: series
      });
    };
    fileExport = function(data, fileName, extension) {
      var aLink, blob, evt;
      aLink = document.createElement("a");
      blob = new Blob([data]);
      evt = document.createEvent("MouseEvents");
      evt.initEvent("click", false, false);
      aLink.download = fileName + "." + extension;
      aLink.href = URL.createObjectURL(blob);
      return aLink.dispatchEvent(evt);
    };
    $scope.downloadRank = function() {
      return fileExport(JSON.stringify($scope.currentRanks), "rank_" + (new Date()), "txt");
    };
    return $scope.color = function(rank) {
      if (rank <= 2) {
        return "gold";
      }
      if (rank <= 5) {
        return "silver";
      }
      if (rank <= 8) {
        return "brown";
      }
      return "white";
    };
  });

}).call(this);

//# sourceMappingURL=app.js.map
